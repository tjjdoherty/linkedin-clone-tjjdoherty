import { firestore } from '../firebaseConfig';
import { addDoc, collection, onSnapshot, doc, updateDoc, query, where, setDoc } from 'firebase/firestore';
import { toast } from "react-toastify";

// adding the object as well as postsRef because object may include images, video, or emoji files in addition to just text in the status update. dbRef became postsRef

// purpose of PostStatusData and postUserData - add items to the database
// purpose of getStatus and getCurrentUser - onSnapshot will listen for changes when new posts are added or new users are signed up. 
// As soon as that happens the setAllStatus/setCurrentUser will update

// these methods and currentUser starts being passed down as props / a state, from layouts 
// GET CURRENT USER takes SET CURRENT USER from LAYOUTS page. This is where currentUser starts being passed down as props through profile/Home --> profileComponent/HomeComponent

// IMPORTANT!!!!! every post now logs the User ID of the user who wrote it, so you can get to the profile page. 
// BUt it's logging users.id (the firebase generated one) NOT the getUniqueID one. Be careful if this is important later on...

let postsRef = collection(firestore, "posts");
let userRef = collection(firestore, "users");
let likeRef = collection(firestore, "likes");

export const PostStatusData = (object) => {
    addDoc(postsRef, object)
        .then((response) => {
            toast.success("Posted!");
        })
        .catch((error) => {
            console.log(error);
        })
};

// use of on Snapshot - now when we post a status with the postUpdate recent lines of code, it is rendered immediately

export const getStatus = (setAllStatus) => {
    onSnapshot(postsRef, (response) => {
        setAllStatus(
            response.docs.map((docs) => {
                return {...docs.data(), id: docs.id}
            })
        )
    })
};

export const getSingleStatus = (setAllStatus, id) => {
    const singlePostQuery = query(postsRef, where("userID", "==", id));
    onSnapshot(singlePostQuery, (response) => {
        setAllStatus(
            response.docs.map((docs) => {
                return { ...docs.data(), id: docs.id };
            })
        );
    });
};

export const getSingleUser = (setCurrentUser, email) => {
    const singleUserQuery = query(userRef, where("email", "==", email));
    onSnapshot(singleUserQuery, (response) => {
        setCurrentUser(
            response.docs.map((docs) => {
                return { ...docs.data(), id: docs.id };
            })[0]
        );
    });
};

export const postUserData = (object) => {
    addDoc(userRef, object)
    .then(() => {})
    .catch((err) => {
        console.log(err);
    });
};

// line 47 localStorage getItem because in RegisterComponent, we did localStorage setItem userEmail
//setCurrentUser is not returning the email address, it's returning the full user object whose email address in local storage matches the email in the user object
// userID (line 58) is where we transform the autogenerated Firebase ID for a user into our own variable userID

export const getCurrentUser = (setCurrentUser) => {
    let currEmail = localStorage.getItem('userEmail')

    onSnapshot(userRef, (response) => {
        setCurrentUser(
            response.docs
            .map((docs) => {
                return { ...docs.data(), userID: docs.id }
            })
            .filter((item) => {
                return item.email === currEmail;
            })[0]
        )
    })
}

export const editProfile = (userID, payload) => {
    let userToEdit = doc(userRef, userID)

    updateDoc(userToEdit, payload)
    .then(() => {
        toast.success("Updated Profile Details");
    })
    .catch((err) => {
        console.log(err);
    });

}

// likePost has created a likes table (similar to posts and users) which captures postId and userId,

export const likePost = (userId, postId) => {
    try {
        let docToLike = doc(likeRef, `${userId}_${postId}`);

        setDoc(docToLike, { userId, postId })
    }
    catch (err) {
        console.log(err)
    }
}

export const getLikesByUser = (userId, postId, setLikesCount, setLiked) => {
    try {
        let likeQuery = query(likeRef, where('postId', '==', postId))

        onSnapshot(likeQuery, (response) => {
            let likes = response.docs.map((doc) => doc.data())
            let likesCount = likes.length;

            const isLiked = likes.some((like) => like.id === userId)

            setLikesCount(likesCount);
            setLiked(isLiked);
        });
    } catch (err) {
        console.log(err);
    }
}